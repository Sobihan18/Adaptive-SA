import torch
from typing import Tuple, Dict, Any, Optional
import os
import torch.nn as nn
import torch.nn.functional as F

from outils import get_encoder_decoder

class BR_IWAE(nn.Module):
    def __init__(self, model_params: Dict[str, Any]) -> None:
        """
        Initializes the Bias Reduced Importance Weighted Autoencoder (BR-IWAE) model.

        Args:
            model_params (Dict[str, Any]): A dictionary containing model hyperparameters.
                - 'dataset': The dataset used for training the BR-IWAE.
                - 'latent_size': Dimensionality of the latent space.
                - 'K': Number of variational samples used for the BR-IWAE.
                - 't_0': Burn-in period for MCMC.
                - 't_max': Maximum number of MCMC steps.
        """
        super(BR_IWAE, self).__init__()
        self.dataset = model_params['dataset']
        self.latent_size = model_params['latent_size']
        self.K = model_params['K']
        self.t_0 = model_params['t_0']
        self.t_max = model_params['t_max']
        self.encoder, self.fc_mu, self.fc_logvar, self.decoder = get_encoder_decoder(self.dataset, self.latent_size)

    def forward(self, x: torch.Tensor) -> Tuple[torch.Tensor, float]:
        """
        Defines the full forward pass through the BR-IWAE.

        Args:
            x (torch.Tensor): Input tensor (batch of data) to be encoded and decoded.

        Returns:
            Tuple[torch.Tensor, float]:
                - x_hat (torch.Tensor): The reconstructed output generated by the decoder.
                - loss (float): Total average loss.
        """
        mu, logvar = self.encode(x)
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        z_ref = mu + eps * std
        loss = 0.0
        for t in range(self.t_max):
            x_hat, loss_k, z_ref = self.forward_one_step(x, mu, logvar, z_ref)
            if t >= self.t_0:
                loss += loss_k
        return x_hat, loss / (self.t_max - self.t_0)

    def forward_one_step(self, x: torch.Tensor, mu: torch.Tensor, logvar: torch.Tensor, z_ref: torch.Tensor) -> Tuple[torch.Tensor, float, torch.Tensor]:
        """
        Executes one step of the MCMC in the BR-IWAE.

        Args:
            x (torch.Tensor): Input tensor (batch of data) to be encoded.
            mu (torch.Tensor): Mean of the latent variable distribution.
            logvar (torch.Tensor): Log variance of the latent variable distribution.
            z_ref (torch.Tensor): Reference latent sample for the current step.

        Returns:
            Tuple[torch.Tensor, float, torch.Tensor]:
                - x_hat (torch.Tensor): The reconstructed output generated by the decoder.
                - loss (float): Loss for the current step.
                - z_ref (torch.Tensor): Updated reference latent samples after resampling.
        """
        z = self.reparameterize(mu, logvar)
        z_ref = z_ref.unsqueeze(0)
        z = torch.cat((z, z_ref), 0)
        x_hat = self.decode(z)
        loss, z_ref = self.loss_function(x_hat, x, mu, logvar, z)
        return x_hat, loss, z_ref

    def encode(self, x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Computes the parameters of the variational distribution: mean and log variance.

        Args:
            x (torch.Tensor): Input tensor (batch of data) to be encoded.

        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - mu (torch.Tensor): The mean of the variational distribution.
                - logvar (torch.Tensor): The log variance of the variational distribution.
        """
        h = self.encoder(x)
        mu = self.fc_mu(h)
        logvar = self.fc_logvar(h)
        return mu, logvar

    def reparameterize(self, mu: torch.Tensor, logvar: torch.Tensor) -> torch.Tensor:
        """
        Applies the reparameterization trick to sample from the variational distribution N(mu, sigma^2).

        Args:
            mu (torch.Tensor): The mean of the variational distribution.
            logvar (torch.Tensor): The log variance of the variational distribution.

        Returns:
            torch.Tensor: Latent samples drawn from the variational distribution.
        """
        std = torch.exp(0.5 * logvar)
        eps = torch.randn(self.K - 1, *mu.size(), device=mu.device)
        z = mu + eps * std
        return z

    def decode(self, z: torch.Tensor) -> torch.Tensor:
        """
        Decodes latent samples z back into the original image space.

        Args:
            z (torch.Tensor): Latent samples drawn from the variational distribution.

        Returns:
            torch.Tensor: Reconstructed output tensor from the decoder.
        """
        batch_size = z.shape[1]
        z = z.view(-1, self.latent_size)
        x_hat = self.decoder(z)
        if self.dataset == 'FMNIST':
            x_hat = x_hat.view(self.K, batch_size, -1)
        else:
            x_hat = x_hat.view(self.K, batch_size, 3, 32, 32)
        return x_hat

    def loss_function(self, x_hat: torch.Tensor, x: torch.Tensor, mu: torch.Tensor, 
                     logvar: torch.Tensor, z: torch.Tensor) -> Tuple[float, torch.Tensor]:
        """
        Computes the BR-IWAE loss.

        Args:
            x_hat (torch.Tensor): The reconstructed output generated by the decoder.
            x (torch.Tensor): The original input tensor, serving as the target for reconstruction.
            mu (torch.Tensor): The mean of the variational distribution.
            logvar (torch.Tensor): The log variance of the variational distribution.
            z (torch.Tensor): Latent samples drawn from the variational distribution.

        Returns:
            Tuple[float, torch.Tensor]:
                - loss (float): The total loss in the current step.
                - z_ref (torch.Tensor): Resampled latent variable.
        """
        b = x.shape[0]
        std = torch.exp(0.5 * logvar)
        log_q_z_x = torch.distributions.Normal(loc=mu, scale=std).log_prob(z).sum(-1)
        log_p_z = torch.distributions.Normal(torch.zeros_like(mu), torch.ones_like(std)).log_prob(z).sum(-1)
        if self.dataset == 'FMNIST':
            xx = x.unsqueeze(0).repeat(self.K, 1, 1)
            likelihood = -F.binary_cross_entropy(x_hat, xx, reduction='none').sum(dim=[2])
        else:
            xx = x.unsqueeze(0).repeat(self.K, 1, 1, 1, 1)
            likelihood = -F.binary_cross_entropy(x_hat, xx, reduction='none').sum(dim=[2, 3, 4])

        log_weight = log_p_z + likelihood - log_q_z_x
        log_weight2 = log_weight - torch.max(log_weight, 0)[0]  
        weight = torch.exp(log_weight2)
        weight = weight / torch.sum(weight, 0)
        weight = weight.detach()

        # Resampling
        indices = torch.multinomial(weight.T, 1, replacement=True).view(-1)
        zz = torch.permute(z, (1, 0, 2))
        z_ref = zz[torch.arange(b), indices]

        loss = -torch.sum(torch.sum(weight * log_weight, 0)) + torch.log(torch.Tensor([self.K]).to(mu.device))
        return loss, z_ref